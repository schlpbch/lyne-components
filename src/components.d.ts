/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { InterfaceAccordionItemAttributes } from "./components/lyne-accordion-item/lyne-accordion-item.custom.d";
import { InterfaceButtonAttributes } from "./components/lyne-button/lyne-button.custom.d";
import { InterfaceCardBadgeAttributes } from "./components/lyne-card-badge/lyne-card-badge.custom";
import { InterfaceCardProductAttributes } from "./components/lyne-card-product/lyne-card-product.custom";
import { InterfaceFooterAttributes } from "./components/lyne-footer/lyne-footer.custom";
import { InterfaceGridAttributes } from "./components/lyne-grid/lyne-grid.custom";
import { InterfaceImageAttributes } from "./components/lyne-image/lyne-image.custom.d";
import { InterfaceJourneyHeaderAttributes } from "./components/lyne-journey-header/lyne-journey-header.custom";
import { InterfaceLinkAttributes } from "./components/lyne-link/lyne-link.custom.d";
import { InterfaceLinkButtonAttributes } from "./components/lyne-link-button/lyne-link-button.custom.d";
import { InterfaceLyneLinkListAttributes } from "./components/lyne-link-list/lyne-link-list.custom.d";
import { InterfaceTitleAttributes } from "./components/lyne-title/lyne-title.custom.d";
import { InterfaceOverlayEventDetail } from "./global/core/components/overlay/overlays-interface";
import { InterfacePanelAttributes } from "./components/lyne-panel/lyne-panel.custom.d";
import { InterfacePearlChainAttributes } from "./components/lyne-pearl-chain/lyne-pearl-chain.custom.d";
import { Time } from "./components/lyne-sbb-clock/lyne-sbb-clock.custom.d";
import { InterfaceLogoAttributes } from "./components/lyne-sbb-logo/lyne-sbb-logo.custom.d";
import { InterfaceSignetAttributes } from "./components/lyne-sbb-signet/lyne-sbb-signet.custom.d";
import { InterfaceSectionAttributes } from "./components/lyne-section/lyne-section.custom";
import { InterfaceStackAttributes } from "./components/lyne-stack/lyne-stack.custom";
import { InterfaceLyneTextInputAttributes } from "./components/lyne-text-input/lyne-text-input.custom.d";
import { InterfaceLyneTimetableButtonAttributes } from "./components/lyne-timetable-button/lyne-timetable-button.custom.d";
import { InterfaceLyneTimetableCusHimAttributes } from "./components/lyne-timetable-cus-him/lyne-timetable-cus-him.custom.d";
import { InterfaceLyneTimetableParkAndRailAttributes } from "./components/lyne-timetable-park-and-rail/lyne-timetable-park-and-rail.custom.d";
import { InterfaceLyneTimetablePlatformAttributes } from "./components/lyne-timetable-platform/lyne-timetable-platform.custom.d";
import { InterfaceLyneTimetableTransportationNumberAttributes } from "./components/lyne-timetable-transportation-number/lyne-timetable-transportation-number.custom.d";
import { InterfaceLyneTimetableTransportationTimeAttributes } from "./components/lyne-timetable-transportation-time/lyne-timetable-transportation-time.custom.d";
import { InterfaceLyneTimetableTransportationWalkAttributes } from "./components/lyne-timetable-transportation-walk/lyne-timetable-transportation-walk.custom.d";
import { InterfaceLyneTimetableTravelHintsAttributes } from "./components/lyne-timetable-travel-hints/lyne-timetable-travel-hints.custom.d";
export namespace Components {
    interface LyneAccordion {
        /**
          * Use the aria-labelledby to reference to an id of a title outside of the accordion. That way we can improve the context for the screenreader users. When the first button in the accordion receives focus, the referenced title is also spoken out by the screenreader.
         */
        "ariaLabelledby"?: string;
        /**
          * Set this if you want to use the accordion on a non-white background.
         */
        "nonWhiteBackground"?: boolean;
        /**
          * Set this if you want the accordion to always have open only one item.
         */
        "onlyOneOpen"?: boolean;
    }
    interface LyneAccordionItem {
        /**
          * If set, an accordion can not be toggled
         */
        "disabled"?: boolean;
        /**
          * Id which is sent in the event after opening/closing accordion
         */
        "eventId"?: string;
        /**
          * Text to show as title for the accordion.
         */
        "heading": string;
        /**
          * Heading level.
         */
        "headingLevel"?: InterfaceAccordionItemAttributes['level'];
        /**
          * Set to true to open the accordion item. Set to false to close it.
         */
        "open"?: boolean;
    }
    interface LyneAutocomplete {
        /**
          * Autocomplete id. If you use multiple instances on a page, you should set individual id's to each of them.
         */
        "autocompleteId"?: string;
        /**
          * Id which is sent as the id in the eventDetail payload when a value is selected
         */
        "eventId"?: string;
        /**
          * Define if borderless variant of autocomplete input should be used. See documentation of lyne-text-input for details.
         */
        "inputBorderless"?: boolean;
        /**
          * Debounce timeout to use for the input. See documentation of lyne-text-input for details.
         */
        "inputDebounceTimeout"?: number;
        /**
          * Label attribute for the input element. See lyne-text-input for details.
         */
        "inputLabel": string;
        /**
          * Determine if the input label should be visible. See lyne-text-input for details.
         */
        "inputLabelVisible"?: boolean;
        /**
          * Name attribute for the input element. See lyne-text-input for details.
         */
        "inputName": string;
        /**
          * Placeholder attribute for the input element. See lyne-text-input for details.
         */
        "inputPlaceholder"?: string;
        /**
          * Items to show in the autocomplete interface. You should pass a stringified array of objects, containing the `text` key for each object with an appropriate value.
         */
        "items"?: string;
        /**
          * Define how many chars a user must type into the input field for the autocomplete list to show up.
         */
        "minChars"?: number;
        /**
          * The value to use as default value for the input. The input value or the selected autocomplete value is reflected to this attribute.
         */
        "value"?: string;
    }
    interface LyneAutocompleteItem {
        /**
          * The aria-posinset attribute for the list element
         */
        "ariaPosinset"?: number;
        /**
          * The aira-setsize attribute for the list element
         */
        "ariaSetsize"?: number;
        /**
          * The text to highlight within the string property
         */
        "highlight"?: string;
        /**
          * Mark the item as selected, which will change it's appearance and the according aria attributes.
         */
        "selected"?: boolean;
        /**
          * Text to show as content of the autocomplete item
         */
        "text": string;
    }
    interface LyneButton {
        /**
          * If you use the button to trigger another widget which itself is covering the page, you must provide an according attribute for aria-haspopup.
         */
        "ariaHaspopup"?: InterfaceButtonAttributes['popup'];
        /**
          * Set to true to get a disabled button
         */
        "disabled"?: boolean;
        /**
          * Id which is sent in the click event payload
         */
        "eventId"?: string;
        /**
          * Define if icon should be shown or not
         */
        "icon"?: boolean;
        /**
          * If you use an icon without a label, you must provide an iconDescription
         */
        "iconDescription"?: string;
        /**
          * Label text to show on the button
         */
        "label"?: string;
        /**
          * The name attribute to use for the button
         */
        "name"?: string;
        /**
          * Size variant, either large or small.
         */
        "size"?: InterfaceButtonAttributes['size'];
        /**
          * The type attribute to use for the button
         */
        "type"?: InterfaceButtonAttributes['type'];
        /**
          * The value attribute to use for the button
         */
        "value"?: string;
        /**
          * Variant of the button, like primary, secondary etc.
         */
        "variant"?: InterfaceButtonAttributes['variant'];
        /**
          * Set this property to true if you want only a visual represenation of a button, but no interaction (a div instead of a button will be rendered).
         */
        "visualButtonOnly"?: boolean;
    }
    interface LyneCardBadge {
        /**
          * Accessibility label text. This text gets exposed to screen reader users. The text should reflect all the information which gets passed into the component (as text or within the slot) so which is visible in the card badge, either through text or iconography.  Example text: Sales ticket price starts at CHF 37.50
         */
        "accessibilityLabel": string;
        /**
          * Badge appearance
         */
        "appearance": InterfaceCardBadgeAttributes['appearance'];
        /**
          * Mark as discount
         */
        "isDiscount"?: boolean;
        /**
          * Price text
         */
        "price"?: string;
        /**
          * Badge size
         */
        "size": InterfaceCardBadgeAttributes['size'];
        /**
          * From/above price text
         */
        "text"?: string;
    }
    interface LyneCardProduct {
        /**
          * The text which gets exposed to screen reader users. The text should reflect all the information which gets passed into the component's slots and which is visible in the card, either through text or iconography.  Example text: Connection from X to Y, via Z, on date X. Ticket price starts at X.
         */
        "accessibilityLabel": string;
        /**
          * CardProduct appearance
         */
        "appearance"?: InterfaceCardProductAttributes['appearance'];
        /**
          * If you use the button to trigger another widget which itself is covering the page, you must provide an according attribute for aria-haspopup.
         */
        "ariaHaspopup"?: InterfaceCardProductAttributes['popup'];
        /**
          * Id which is sent in the click event payload
         */
        "eventId"?: string;
        /**
          * The href value you want to link to
         */
        "hrefValue"?: string;
        /**
          * The ID value you want to reference
         */
        "idValue"?: string;
        /**
          * Defines if the card behaves like a HTML button. Needs to be set true if the card does not point to a URL.
         */
        "isButton"?: boolean;
        /**
          * Set to true to get a disabled button
         */
        "isDisabled"?: boolean;
        /**
          * CardProduct layout
         */
        "layout"?: InterfaceCardProductAttributes['layout'];
        /**
          * The name attribute to use for the button
         */
        "name"?: string;
        /**
          * The type attribute to use for the button
         */
        "type"?: InterfaceCardProductAttributes['type'];
        /**
          * The value attribute to use for the button
         */
        "value"?: string;
    }
    interface LyneFooter {
        /**
          * Footer title text, visually hidden,  necessary for screenreaders
         */
        "accessibilityTitle": string;
        /**
          * Footer appearance
         */
        "appearance"?: InterfaceFooterAttributes['appearance'];
    }
    interface LyneGrid {
        /**
          * Section appearance
         */
        "appearance"?: InterfaceGridAttributes['appearance'];
        /**
          * Grid variant
         */
        "variant"?: InterfaceGridAttributes['variant'];
    }
    interface LyneImage {
        /**
          * An alt text is not always necessary (e.g. in teaser cards when additional link text is provided). In this case we can leave the value of the alt attribute blank, but the attribute itself still needs to be present. That way we can signal assistive technology, that they can skip the image.
         */
        "alt"?: string;
        /**
          * A caption can provide additional context to the image (e.g. descriptions and the like). Links will automatically receive tabindex=-1 if hideFromScreenreader is set to true. That way they will no longer become focusable.
         */
        "caption"?: string;
        /**
          * If a copyright text is provided, we will add it to the caption and create a structured data json-ld block with the copyright information.
         */
        "copyright"?: string;
        /**
          * Copyright holder can either be an Organization or a Person
         */
        "copyrightHolder": InterfaceImageAttributes['copyrightHolder'];
        /**
          * Set this to true, if you want to pass a custom focal point for the image. See full documentation here: https://docs.imgix.com/apis/rendering/focalpoint-crop
         */
        "customFocalPoint": boolean;
        /**
          * If the lazy property is set to true, the module will automatically change the decoding to async, otherwise the decoding is set to auto which leaves the handling up to the browser. Read more about the decoding attribute here: https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding
         */
        "decoding": InterfaceImageAttributes['decoding'];
        /**
          * Set this to true, to receive visual guideance where the custom focal point is currently set.
         */
        "focalPointDebug": boolean;
        /**
          * Pass in a floating number between 0 (left) and 1 (right).
         */
        "focalPointX": number;
        /**
          * Pass in a floating number between 0 (top) and 1 (bottom).
         */
        "focalPointY": number;
        /**
          * In cases when the image is just serving a decorative purpose, we can hide it from assistive technologies (e.g. an image in a teaser card)
         */
        "hideFromScreenreader": boolean;
        /**
          * Right now the module is heavily coupled with the image delivery service imgix and depends on the original files being stored inside of AEM. You can pass in any https://cdn.img.sbb.ch img src address you find on sbb.ch to play around with it. Just strip the url parameters and paste in the plain file address. If you want to know how to best work with this module with images coming from a different source, please contact the LYNE Core Team.
         */
        "imageSrc"?: string;
        /**
          * Just some example image file you can use to play around with the component.
         */
        "imageSrcExamples"?: string;
        /**
          * The importance attribute is fairly new attribute which should help the browser decide which resources it should prioritise during page load. We will set the attribute value based on the value, we receive in the loading attribute. 'eager', which we use for the largest image within the initial viewport, will set the attribute value to 'high'. 'lazy', which we use for images below the fold, will set the attribute value to 'low'.
         */
        "importance": InterfaceImageAttributes['importance'];
        /**
          * With the support of native image lazy loading, we can now decide whether we want to load the image immediately or only once it is close to the visible viewport. The value eager is best used for images within the initial viewport. We want to load these images as fast as possible to improve the Core Web Vitals values. lazy on the other hand works best for images which are further down the page or invisible during the loading of the initial viewport.
         */
        "loading": InterfaceImageAttributes['loading'];
        /**
          * If set to true, we show a blurred version of the image as placeholder before the actual image shows up. This will help to improve the perceived loading performance. Read more about the idea of lqip here: https://medium.com/@imgix/lqip-your-images-for-fast-loading-2523d9ee4a62
         */
        "lqip": boolean;
        /**
          * With performance.mark you can log a timestamp associated with the name you define in performanceMark when a certain event is happening. In our case we will log the performance.mark into the PerformanceEntry API once the image is fully loaded. Performance monitoring tools like SpeedCurve or Lighthouse are then able to grab these entries from the PerformanceEntry API and give us additional information and insights about our page loading behaviour. We are then also able to monitor these values over a long period to see if our performance increases or decreases over time. Best to use lowercase strings here, separate words with underscores or dashes.
         */
        "performanceMark"?: string;
        /**
          * With the pictureSizesConfig object, you can pass in information into image about what kind of source elements should get rendered. mediaQueries accepts multiple Media Query entries which can get combined by defining a conditionOperator. An example could look like this: {    "breakpoints": [      {        "image": {          "height": "675",          "width": "1200"        },        "mediaQueries": [          {            "conditionFeature": "min-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "breakpoint-large-min"            },            "conditionOperator": false          }        ]      },      {        "image": {          "height": "549",          "width": "976"        },        "mediaQueries": [          {            "conditionFeature": "min-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "breakpoint-small-min"            },            "conditionOperator": false          }        ]      },      {        "image": {          "height": "180",          "width": "320"        },        "mediaQueries": [          {            "conditionFeature": "max-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "breakpoint-micro-max"            },            "conditionOperator": "and"          },          {            "conditionFeature": "orientation",            "conditionFeatureValue": {              "lyneDesignToken": false,              "value": "landscape"            },            "conditionOperator": false          }        ]      }    ]  }
         */
        "pictureSizesConfig"?: string;
        /**
          * Based on the variant, we apply specific aspect ratios to the image accross all viewports.
         */
        "variant"?: InterfaceImageAttributes['variant'];
    }
    interface LyneInputError {
        /**
          * The error message, we want to show.
         */
        "message": string;
    }
    interface LyneJourneyHeader {
        /**
          * Journey header appearance
         */
        "appearance"?: InterfaceJourneyHeaderAttributes['appearance'];
        /**
          * Destination location for the journey header
         */
        "destination": string;
        /**
          * Is the journey a round trip. If so it gets indicated through a roundtrip icon
         */
        "isRoundTrip"?: boolean;
        /**
          * A11y Tip: Sometimes we need to set an id, especially if we want to associate a relationship with another element through the use of aria-labelledby or aria-describedby or just offer an anchor target
         */
        "journeyHeaderId"?: '';
        /**
          * Journey header markup: Depends on the context where the journey will be used but it is important to pick the correct markup element to match to correct semantics
         */
        "markup"?: InterfaceJourneyHeaderAttributes['markup'];
        /**
          * Origin location for the journey header
         */
        "origin": string;
        /**
          * Journey header size
         */
        "size"?: InterfaceJourneyHeaderAttributes['size'];
    }
    interface LyneLink {
        /**
          * If set to true, the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The href value you want to link to
         */
        "hrefValue": string;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://lyne.sbb.ch/tokens/icons/.
         */
        "icon"?: string;
        /**
          * Decide whether the icon should get flipped horizontally if the document writing mode is changed from ltr to rtl or vice versa.
         */
        "iconFlip"?: boolean;
        /**
          * The icon can either be place before or after the text.
         */
        "iconPlacement": InterfaceLinkAttributes['iconPlacement'];
        /**
          * Pass in an id, if you need to identify the link element.
         */
        "idValue"?: string;
        /**
          * The link text we want to visually show.
         */
        "text": string;
        /**
          * Text size, the link should get in the non button variation.
         */
        "textSize": InterfaceLinkAttributes['textSize'];
        /**
          * Choose the link style variant.
         */
        "variant": InterfaceLinkAttributes['variant'];
    }
    interface LyneLinkButton {
        /**
          * If set to true, the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The href value you want to link to
         */
        "hrefValue": string;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://lyne.sbb.ch/tokens/icons/
         */
        "icon"?: string;
        /**
          * Decide whether the icon should get flipped horizontally if the document writing mode is changed from ltr to rtl or vice versa.
         */
        "iconFlip"?: boolean;
        /**
          * The icon can either be place before or after the text
         */
        "iconPlacement": InterfaceLinkButtonAttributes['iconPlacement'];
        /**
          * Pass in an id, if you need to identify the link element.
         */
        "idValue"?: string;
        /**
          * The link text we want to visually show
         */
        "text": string;
        /**
          * Choose the link button style variant
         */
        "variant": InterfaceLinkButtonAttributes['variant'];
    }
    interface LyneLinkList {
        /**
          * The direction in which the list will be shown. "-from-large" indicates that the list will be horizontal from above large breakpoint. Below it has the default behaviour which is a vertical list.
         */
        "listDirection": InterfaceLyneLinkListAttributes['direction'];
        /**
          * The semantic level of the title, e.g. 3 = h3
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
        /**
          * The title text we want to show before the list
         */
        "titleText"?: string;
        /**
          * Choose the link list style. This does not refer to light or dark mode, but the background color on which the list is placed. Light and dark mode styling will be applied differently.
         */
        "variant": InterfaceLyneLinkListAttributes['variant'];
    }
    interface LyneOverlay {
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        "overlayIndex": number;
        "present": () => Promise<void>;
    }
    interface LynePanel {
        /**
          * The text to use as button text
         */
        "buttonText": string;
        /**
          * Id which is sent in the click event payload for the button
         */
        "eventId"?: string;
        /**
          * The tag to use for the text element
         */
        "tag"?: InterfacePanelAttributes['tag'];
        /**
          * The text to show in the panel
         */
        "text": string;
    }
    interface LynePearlChain {
        /**
          * Per default, the current location has a pulsating animation. You can disable the animation with this property.
         */
        "disableAnimation"?: boolean;
        /**
          * Stringified JSON to define the legs of the pearl-chain. Format: `{"legs": [{"cancellation": true, "duration": 25}, ...]}` `duration`: number between 0 and 100. Duration of the leg is relative to the total travel time. Example: departure 16:30, change at 16:40, arrival at 17:00. So the change should have a duration of 33.33%. `cancellation`: if set, the leg will be marked as canceled.
         */
        "legs": string;
        /**
          * Define, if the pearl-chain represents a connection in the past, in the future or if it is a currently running connection. If it is currently running, provide a number between 0 and 100, which will represent the current location on the pearl-chain.
         */
        "status"?: InterfacePearlChainAttributes['status'];
    }
    interface LyneSbbClock {
        /**
          * initialTime accepts a string following a ${number}:${number}:${number} pattern. If left empty or the string 'now' is used we will set the current time the client has on its device.
         */
        "initialTime"?: Time;
        /**
          * If set to true, the clock will be paused.
         */
        "paused"?: boolean;
    }
    interface LyneSbbLogo {
        /**
          * The Logo needs to have a certain protective room around it
         */
        "protectiveRoom"?: InterfaceLogoAttributes['protectiveRoom'];
        /**
          * According to the Corporate Design Guidelines the logo can be used in these variants
         */
        "variant"?: InterfaceLogoAttributes['variant'];
    }
    interface LyneSbbSignet {
        /**
          * The Signet needs to have a certain protective room around it
         */
        "protectiveRoom"?: InterfaceSignetAttributes['protectiveRoom'];
        /**
          * According to the Corporate Design Guidelines the signet can be used in these variants
         */
        "variant"?: InterfaceSignetAttributes['variant'];
    }
    interface LyneSection {
        /**
          * Section appearance
         */
        "appearance"?: InterfaceSectionAttributes['appearance'];
        /**
          * Section width
         */
        "width"?: InterfaceSectionAttributes['width'];
    }
    interface LyneSlotComponent {
    }
    interface LyneStack {
        /**
          * Stack appearance
         */
        "appearance"?: InterfaceStackAttributes['appearance'];
        /**
          * Collapse horizontal stack into vertical layout below a certain breakpoint. This has only an effect for horizontal appearances.
         */
        "collapseHorizontalBelow"?: InterfaceStackAttributes['collapseHorizontalBelow'];
        /**
          * Stack gap horizontal, defines the space between each stack items in the vertical direction. The spacing can be fixed or responsive (which then depends on the breakpoint). The `x` in the fixed spacing scale is a representation of the base spacing unit. E.g. `3 * base spacing unit`
         */
        "gapHorizontal"?: InterfaceStackAttributes['spacing'];
        /**
          * Stack gap vertical, defines the space between each stack items in the horizontal direction. The spacing can be fixed or responsive (which then depends on the breakpoint). The `x` in the fixed spacing scale is a representation of the base spacing unit. E.g. `3 * base spacing unit`
         */
        "gapVertical"?: InterfaceStackAttributes['spacing'];
        /**
          * Render stack as placeholder
         */
        "isPlaceholder"?: boolean;
        /**
          * Render horizontal stack as non-wrapping stack
         */
        "noWrap"?: boolean;
        /**
          * Space before the stack
         */
        "spaceLeading"?: InterfaceStackAttributes['spacing'];
        /**
          * Space before the stack
         */
        "spaceTrailing"?: InterfaceStackAttributes['spacing'];
        /**
          * Stack height, reflects CSS property `height` and accepts all appropriate/valid CSS height values
         */
        "stackHeight"?: string;
        /**
          * Stack width, reflects CSS property `width` and accepts all appropriate/valid CSS width values
         */
        "stackWidth"?: string;
        /**
          * Stack tag / HTML representation of the stack. If the stack represents a list of items change the HTML representation to `ul` or `ol` tag. In this case the only allowed stack items are `li` elements.
         */
        "tag"?: InterfaceStackAttributes['tag'];
    }
    interface LyneTeaserHero {
        /**
          * Button text property for lyne-panel. See lyne-panel for additional info
         */
        "buttonText": string;
        /**
          * Image loading property. See lyne-image for additional info
         */
        "imageLoading"?: InterfaceImageAttributes['loading'];
        /**
          * Image source property for lyne-image. See lyne-image for additional info
         */
        "imageSrc": string;
        /**
          * Link to open if the teaser is clicked/pressed.
         */
        "link": string;
        /**
          * If `openInNewWindow` is set, you should provide according information which will be read aloud for screenreader users (e.g. "Link target will open in a new window").
         */
        "newWindowInfoText"?: string;
        /**
          * If set, the link will be opened in a new window.
         */
        "openInNewWindow"?: boolean;
        /**
          * Text property for lyne-panel. See lyne-panel for additional info
         */
        "text": string;
    }
    interface LyneTextInput {
        /**
          * If set to true, the input element will have no border, but a drop shadow.
         */
        "borderless"?: boolean;
        /**
          * Debounce type for the input change event in ms. If you set this value to e.g. 300, we fire the input event only every 300ms.
         */
        "debounceInputEvent"?: number;
        /**
          * Id which is sent as the id in the eventDetail payload
         */
        "eventId"?: string;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://lyne.sbb.ch/tokens/icons/.
         */
        "icon"?: string;
        /**
          * The aria-autocomplete attribute for the input element.
         */
        "inputAriaAutoComplete"?: InterfaceLyneTextInputAttributes['inputAriaAutoComplete'];
        /**
          * The id to use as the aira-controls attribute for the input element.
         */
        "inputAriaControls"?: string;
        /**
          * Set aria-expanded on the input element.
         */
        "inputAriaExpanded"?: boolean;
        /**
          * Choose either on, off or one of the existing autocomplete values. Read more about them here: https://mzl.la/3wpfaDV
         */
        "inputAutoCompleteValue"?: InterfaceLyneTextInputAttributes['inputAutoCompleteValue'];
        /**
          * If set to true, the input field will be disabled.
         */
        "inputDisabled"?: boolean;
        /**
          * If set to true, we will set an an error message for the current input field.
         */
        "inputError"?: boolean;
        /**
          * Each input needs to have an individual id. If no id is provided, the component will create a unique id by itself.
         */
        "inputId"?: string;
        /**
          * Pass on a expected max length.
         */
        "inputMaxLength"?: number;
        /**
          * Pass on a expected min length.
         */
        "inputMinLength"?: number;
        /**
          * Each input should have an individual name.
         */
        "inputName": string;
        /**
          * Add a validation pattern (regex) the input should follow. Read more here: https://mzl.la/3C3HTiG
         */
        "inputPattern"?: string;
        /**
          * Add a placeholder to show what kind of input is expected.
         */
        "inputPlaceholder"?: string;
        /**
          * If set to true, an input in this field will be required.
         */
        "inputRequired"?: boolean;
        /**
          * The role attribute used for the input element.
         */
        "inputRole"?: InterfaceLyneTextInputAttributes['inputRole'];
        /**
          * Define which input type you would like to use. Read more about the individual advantages here, most of the are related to show the user the most convienient keyboard: https://bit.ly/3wuQE47
         */
        "inputType": string;
        /**
          * Value for the input element.
         */
        "inputValue"?: string;
        /**
          * Each input element needs to have a label associated with it.
         */
        "label": string;
        /**
          * If set to false, the label will be visually hidden but still be in the markup to provide proper semantics
         */
        "labelVisible"?: boolean;
    }
    interface LyneTimetable {
    }
    interface LyneTimetableBarrierFree {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableButton {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableButtonAttributes['appearance'];
        /**
          * If you use the button to trigger another widget which itself is covering the page, you must provide an according attribute for aria-haspopup.
         */
        "ariaHaspopup"?: InterfaceLyneTimetableButtonAttributes['popup'];
        /**
          * If appearance is set to 'cus-him' or 'walk', we need to provide a config to popultate the nested web component.
         */
        "config"?: string;
        /**
          * Set to true to get a disabled button
         */
        "disabled"?: boolean;
        /**
          * Id which is sent in the click event payload
         */
        "eventId"?: string;
        /**
          * Set to true to initially show the state, which would get set by pressing the button.
         */
        "expanded"?: boolean;
        /**
          * The name attribute to use for the button
         */
        "name"?: string;
    }
    interface LyneTimetableCusHim {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableCusHimAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableDuration {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableOccupancy {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableParkAndRail {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableParkAndRailAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetablePlatform {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetablePlatformAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableRow {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableRowButton {
        /**
          * Id which is sent in the event of clicking the button
         */
        "eventId"?: string;
        /**
          * Set to true to initially show the state, which would get set by pressing the button.
         */
        "expanded"?: boolean;
    }
    interface LyneTimetableRowColumnHeaders {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableRowDayChange {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableRowHeader {
        "config": string;
    }
    interface LyneTimetableTransportationDetails {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableTransportationNumber {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableTransportationNumberAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableTransportationTime {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableTransportationTimeAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableTransportationWalk {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableTransportationWalkAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableTravelHints {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableTravelHintsAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTitle {
        /**
          * Title level
         */
        "level"?: InterfaceTitleAttributes['level'];
        /**
          * Text for the title
         */
        "text": string;
        /**
          * A11y Tip: Sometimes we need to set an id, especially if we want to associate a relationship with another element through the use of aria-labelledby or aria-describedby or just offer an anchor target
         */
        "titleId"?: '';
        /**
          * Choose the title style variant
         */
        "variant": InterfaceTitleAttributes['variant'];
        /**
          * Visual level for the title. If you don't define the visual-level, the value for level will be used.
         */
        "visualLevel"?: InterfaceTitleAttributes['visualLevel'];
        /**
          * Sometimes we need a title in the markup to present a proper hierarchy to the screenreaders while we do not want to let that title appear visually. In this case we set visuallyHidden to true
         */
        "visuallyHidden"?: false;
    }
}
declare global {
    interface HTMLLyneAccordionElement extends Components.LyneAccordion, HTMLStencilElement {
    }
    var HTMLLyneAccordionElement: {
        prototype: HTMLLyneAccordionElement;
        new (): HTMLLyneAccordionElement;
    };
    interface HTMLLyneAccordionItemElement extends Components.LyneAccordionItem, HTMLStencilElement {
    }
    var HTMLLyneAccordionItemElement: {
        prototype: HTMLLyneAccordionItemElement;
        new (): HTMLLyneAccordionItemElement;
    };
    interface HTMLLyneAutocompleteElement extends Components.LyneAutocomplete, HTMLStencilElement {
    }
    var HTMLLyneAutocompleteElement: {
        prototype: HTMLLyneAutocompleteElement;
        new (): HTMLLyneAutocompleteElement;
    };
    interface HTMLLyneAutocompleteItemElement extends Components.LyneAutocompleteItem, HTMLStencilElement {
    }
    var HTMLLyneAutocompleteItemElement: {
        prototype: HTMLLyneAutocompleteItemElement;
        new (): HTMLLyneAutocompleteItemElement;
    };
    interface HTMLLyneButtonElement extends Components.LyneButton, HTMLStencilElement {
    }
    var HTMLLyneButtonElement: {
        prototype: HTMLLyneButtonElement;
        new (): HTMLLyneButtonElement;
    };
    interface HTMLLyneCardBadgeElement extends Components.LyneCardBadge, HTMLStencilElement {
    }
    var HTMLLyneCardBadgeElement: {
        prototype: HTMLLyneCardBadgeElement;
        new (): HTMLLyneCardBadgeElement;
    };
    interface HTMLLyneCardProductElement extends Components.LyneCardProduct, HTMLStencilElement {
    }
    var HTMLLyneCardProductElement: {
        prototype: HTMLLyneCardProductElement;
        new (): HTMLLyneCardProductElement;
    };
    interface HTMLLyneFooterElement extends Components.LyneFooter, HTMLStencilElement {
    }
    var HTMLLyneFooterElement: {
        prototype: HTMLLyneFooterElement;
        new (): HTMLLyneFooterElement;
    };
    interface HTMLLyneGridElement extends Components.LyneGrid, HTMLStencilElement {
    }
    var HTMLLyneGridElement: {
        prototype: HTMLLyneGridElement;
        new (): HTMLLyneGridElement;
    };
    interface HTMLLyneImageElement extends Components.LyneImage, HTMLStencilElement {
    }
    var HTMLLyneImageElement: {
        prototype: HTMLLyneImageElement;
        new (): HTMLLyneImageElement;
    };
    interface HTMLLyneInputErrorElement extends Components.LyneInputError, HTMLStencilElement {
    }
    var HTMLLyneInputErrorElement: {
        prototype: HTMLLyneInputErrorElement;
        new (): HTMLLyneInputErrorElement;
    };
    interface HTMLLyneJourneyHeaderElement extends Components.LyneJourneyHeader, HTMLStencilElement {
    }
    var HTMLLyneJourneyHeaderElement: {
        prototype: HTMLLyneJourneyHeaderElement;
        new (): HTMLLyneJourneyHeaderElement;
    };
    interface HTMLLyneLinkElement extends Components.LyneLink, HTMLStencilElement {
    }
    var HTMLLyneLinkElement: {
        prototype: HTMLLyneLinkElement;
        new (): HTMLLyneLinkElement;
    };
    interface HTMLLyneLinkButtonElement extends Components.LyneLinkButton, HTMLStencilElement {
    }
    var HTMLLyneLinkButtonElement: {
        prototype: HTMLLyneLinkButtonElement;
        new (): HTMLLyneLinkButtonElement;
    };
    interface HTMLLyneLinkListElement extends Components.LyneLinkList, HTMLStencilElement {
    }
    var HTMLLyneLinkListElement: {
        prototype: HTMLLyneLinkListElement;
        new (): HTMLLyneLinkListElement;
    };
    interface HTMLLyneOverlayElement extends Components.LyneOverlay, HTMLStencilElement {
    }
    var HTMLLyneOverlayElement: {
        prototype: HTMLLyneOverlayElement;
        new (): HTMLLyneOverlayElement;
    };
    interface HTMLLynePanelElement extends Components.LynePanel, HTMLStencilElement {
    }
    var HTMLLynePanelElement: {
        prototype: HTMLLynePanelElement;
        new (): HTMLLynePanelElement;
    };
    interface HTMLLynePearlChainElement extends Components.LynePearlChain, HTMLStencilElement {
    }
    var HTMLLynePearlChainElement: {
        prototype: HTMLLynePearlChainElement;
        new (): HTMLLynePearlChainElement;
    };
    interface HTMLLyneSbbClockElement extends Components.LyneSbbClock, HTMLStencilElement {
    }
    var HTMLLyneSbbClockElement: {
        prototype: HTMLLyneSbbClockElement;
        new (): HTMLLyneSbbClockElement;
    };
    interface HTMLLyneSbbLogoElement extends Components.LyneSbbLogo, HTMLStencilElement {
    }
    var HTMLLyneSbbLogoElement: {
        prototype: HTMLLyneSbbLogoElement;
        new (): HTMLLyneSbbLogoElement;
    };
    interface HTMLLyneSbbSignetElement extends Components.LyneSbbSignet, HTMLStencilElement {
    }
    var HTMLLyneSbbSignetElement: {
        prototype: HTMLLyneSbbSignetElement;
        new (): HTMLLyneSbbSignetElement;
    };
    interface HTMLLyneSectionElement extends Components.LyneSection, HTMLStencilElement {
    }
    var HTMLLyneSectionElement: {
        prototype: HTMLLyneSectionElement;
        new (): HTMLLyneSectionElement;
    };
    interface HTMLLyneSlotComponentElement extends Components.LyneSlotComponent, HTMLStencilElement {
    }
    var HTMLLyneSlotComponentElement: {
        prototype: HTMLLyneSlotComponentElement;
        new (): HTMLLyneSlotComponentElement;
    };
    interface HTMLLyneStackElement extends Components.LyneStack, HTMLStencilElement {
    }
    var HTMLLyneStackElement: {
        prototype: HTMLLyneStackElement;
        new (): HTMLLyneStackElement;
    };
    interface HTMLLyneTeaserHeroElement extends Components.LyneTeaserHero, HTMLStencilElement {
    }
    var HTMLLyneTeaserHeroElement: {
        prototype: HTMLLyneTeaserHeroElement;
        new (): HTMLLyneTeaserHeroElement;
    };
    interface HTMLLyneTextInputElement extends Components.LyneTextInput, HTMLStencilElement {
    }
    var HTMLLyneTextInputElement: {
        prototype: HTMLLyneTextInputElement;
        new (): HTMLLyneTextInputElement;
    };
    interface HTMLLyneTimetableElement extends Components.LyneTimetable, HTMLStencilElement {
    }
    var HTMLLyneTimetableElement: {
        prototype: HTMLLyneTimetableElement;
        new (): HTMLLyneTimetableElement;
    };
    interface HTMLLyneTimetableBarrierFreeElement extends Components.LyneTimetableBarrierFree, HTMLStencilElement {
    }
    var HTMLLyneTimetableBarrierFreeElement: {
        prototype: HTMLLyneTimetableBarrierFreeElement;
        new (): HTMLLyneTimetableBarrierFreeElement;
    };
    interface HTMLLyneTimetableButtonElement extends Components.LyneTimetableButton, HTMLStencilElement {
    }
    var HTMLLyneTimetableButtonElement: {
        prototype: HTMLLyneTimetableButtonElement;
        new (): HTMLLyneTimetableButtonElement;
    };
    interface HTMLLyneTimetableCusHimElement extends Components.LyneTimetableCusHim, HTMLStencilElement {
    }
    var HTMLLyneTimetableCusHimElement: {
        prototype: HTMLLyneTimetableCusHimElement;
        new (): HTMLLyneTimetableCusHimElement;
    };
    interface HTMLLyneTimetableDurationElement extends Components.LyneTimetableDuration, HTMLStencilElement {
    }
    var HTMLLyneTimetableDurationElement: {
        prototype: HTMLLyneTimetableDurationElement;
        new (): HTMLLyneTimetableDurationElement;
    };
    interface HTMLLyneTimetableOccupancyElement extends Components.LyneTimetableOccupancy, HTMLStencilElement {
    }
    var HTMLLyneTimetableOccupancyElement: {
        prototype: HTMLLyneTimetableOccupancyElement;
        new (): HTMLLyneTimetableOccupancyElement;
    };
    interface HTMLLyneTimetableParkAndRailElement extends Components.LyneTimetableParkAndRail, HTMLStencilElement {
    }
    var HTMLLyneTimetableParkAndRailElement: {
        prototype: HTMLLyneTimetableParkAndRailElement;
        new (): HTMLLyneTimetableParkAndRailElement;
    };
    interface HTMLLyneTimetablePlatformElement extends Components.LyneTimetablePlatform, HTMLStencilElement {
    }
    var HTMLLyneTimetablePlatformElement: {
        prototype: HTMLLyneTimetablePlatformElement;
        new (): HTMLLyneTimetablePlatformElement;
    };
    interface HTMLLyneTimetableRowElement extends Components.LyneTimetableRow, HTMLStencilElement {
    }
    var HTMLLyneTimetableRowElement: {
        prototype: HTMLLyneTimetableRowElement;
        new (): HTMLLyneTimetableRowElement;
    };
    interface HTMLLyneTimetableRowButtonElement extends Components.LyneTimetableRowButton, HTMLStencilElement {
    }
    var HTMLLyneTimetableRowButtonElement: {
        prototype: HTMLLyneTimetableRowButtonElement;
        new (): HTMLLyneTimetableRowButtonElement;
    };
    interface HTMLLyneTimetableRowColumnHeadersElement extends Components.LyneTimetableRowColumnHeaders, HTMLStencilElement {
    }
    var HTMLLyneTimetableRowColumnHeadersElement: {
        prototype: HTMLLyneTimetableRowColumnHeadersElement;
        new (): HTMLLyneTimetableRowColumnHeadersElement;
    };
    interface HTMLLyneTimetableRowDayChangeElement extends Components.LyneTimetableRowDayChange, HTMLStencilElement {
    }
    var HTMLLyneTimetableRowDayChangeElement: {
        prototype: HTMLLyneTimetableRowDayChangeElement;
        new (): HTMLLyneTimetableRowDayChangeElement;
    };
    interface HTMLLyneTimetableRowHeaderElement extends Components.LyneTimetableRowHeader, HTMLStencilElement {
    }
    var HTMLLyneTimetableRowHeaderElement: {
        prototype: HTMLLyneTimetableRowHeaderElement;
        new (): HTMLLyneTimetableRowHeaderElement;
    };
    interface HTMLLyneTimetableTransportationDetailsElement extends Components.LyneTimetableTransportationDetails, HTMLStencilElement {
    }
    var HTMLLyneTimetableTransportationDetailsElement: {
        prototype: HTMLLyneTimetableTransportationDetailsElement;
        new (): HTMLLyneTimetableTransportationDetailsElement;
    };
    interface HTMLLyneTimetableTransportationNumberElement extends Components.LyneTimetableTransportationNumber, HTMLStencilElement {
    }
    var HTMLLyneTimetableTransportationNumberElement: {
        prototype: HTMLLyneTimetableTransportationNumberElement;
        new (): HTMLLyneTimetableTransportationNumberElement;
    };
    interface HTMLLyneTimetableTransportationTimeElement extends Components.LyneTimetableTransportationTime, HTMLStencilElement {
    }
    var HTMLLyneTimetableTransportationTimeElement: {
        prototype: HTMLLyneTimetableTransportationTimeElement;
        new (): HTMLLyneTimetableTransportationTimeElement;
    };
    interface HTMLLyneTimetableTransportationWalkElement extends Components.LyneTimetableTransportationWalk, HTMLStencilElement {
    }
    var HTMLLyneTimetableTransportationWalkElement: {
        prototype: HTMLLyneTimetableTransportationWalkElement;
        new (): HTMLLyneTimetableTransportationWalkElement;
    };
    interface HTMLLyneTimetableTravelHintsElement extends Components.LyneTimetableTravelHints, HTMLStencilElement {
    }
    var HTMLLyneTimetableTravelHintsElement: {
        prototype: HTMLLyneTimetableTravelHintsElement;
        new (): HTMLLyneTimetableTravelHintsElement;
    };
    interface HTMLLyneTitleElement extends Components.LyneTitle, HTMLStencilElement {
    }
    var HTMLLyneTitleElement: {
        prototype: HTMLLyneTitleElement;
        new (): HTMLLyneTitleElement;
    };
    interface HTMLElementTagNameMap {
        "lyne-accordion": HTMLLyneAccordionElement;
        "lyne-accordion-item": HTMLLyneAccordionItemElement;
        "lyne-autocomplete": HTMLLyneAutocompleteElement;
        "lyne-autocomplete-item": HTMLLyneAutocompleteItemElement;
        "lyne-button": HTMLLyneButtonElement;
        "lyne-card-badge": HTMLLyneCardBadgeElement;
        "lyne-card-product": HTMLLyneCardProductElement;
        "lyne-footer": HTMLLyneFooterElement;
        "lyne-grid": HTMLLyneGridElement;
        "lyne-image": HTMLLyneImageElement;
        "lyne-input-error": HTMLLyneInputErrorElement;
        "lyne-journey-header": HTMLLyneJourneyHeaderElement;
        "lyne-link": HTMLLyneLinkElement;
        "lyne-link-button": HTMLLyneLinkButtonElement;
        "lyne-link-list": HTMLLyneLinkListElement;
        "lyne-overlay": HTMLLyneOverlayElement;
        "lyne-panel": HTMLLynePanelElement;
        "lyne-pearl-chain": HTMLLynePearlChainElement;
        "lyne-sbb-clock": HTMLLyneSbbClockElement;
        "lyne-sbb-logo": HTMLLyneSbbLogoElement;
        "lyne-sbb-signet": HTMLLyneSbbSignetElement;
        "lyne-section": HTMLLyneSectionElement;
        "lyne-slot-component": HTMLLyneSlotComponentElement;
        "lyne-stack": HTMLLyneStackElement;
        "lyne-teaser-hero": HTMLLyneTeaserHeroElement;
        "lyne-text-input": HTMLLyneTextInputElement;
        "lyne-timetable": HTMLLyneTimetableElement;
        "lyne-timetable-barrier-free": HTMLLyneTimetableBarrierFreeElement;
        "lyne-timetable-button": HTMLLyneTimetableButtonElement;
        "lyne-timetable-cus-him": HTMLLyneTimetableCusHimElement;
        "lyne-timetable-duration": HTMLLyneTimetableDurationElement;
        "lyne-timetable-occupancy": HTMLLyneTimetableOccupancyElement;
        "lyne-timetable-park-and-rail": HTMLLyneTimetableParkAndRailElement;
        "lyne-timetable-platform": HTMLLyneTimetablePlatformElement;
        "lyne-timetable-row": HTMLLyneTimetableRowElement;
        "lyne-timetable-row-button": HTMLLyneTimetableRowButtonElement;
        "lyne-timetable-row-column-headers": HTMLLyneTimetableRowColumnHeadersElement;
        "lyne-timetable-row-day-change": HTMLLyneTimetableRowDayChangeElement;
        "lyne-timetable-row-header": HTMLLyneTimetableRowHeaderElement;
        "lyne-timetable-transportation-details": HTMLLyneTimetableTransportationDetailsElement;
        "lyne-timetable-transportation-number": HTMLLyneTimetableTransportationNumberElement;
        "lyne-timetable-transportation-time": HTMLLyneTimetableTransportationTimeElement;
        "lyne-timetable-transportation-walk": HTMLLyneTimetableTransportationWalkElement;
        "lyne-timetable-travel-hints": HTMLLyneTimetableTravelHintsElement;
        "lyne-title": HTMLLyneTitleElement;
    }
}
declare namespace LocalJSX {
    interface LyneAccordion {
        /**
          * Use the aria-labelledby to reference to an id of a title outside of the accordion. That way we can improve the context for the screenreader users. When the first button in the accordion receives focus, the referenced title is also spoken out by the screenreader.
         */
        "ariaLabelledby"?: string;
        /**
          * Set this if you want to use the accordion on a non-white background.
         */
        "nonWhiteBackground"?: boolean;
        /**
          * Set this if you want the accordion to always have open only one item.
         */
        "onlyOneOpen"?: boolean;
    }
    interface LyneAccordionItem {
        /**
          * If set, an accordion can not be toggled
         */
        "disabled"?: boolean;
        /**
          * Id which is sent in the event after opening/closing accordion
         */
        "eventId"?: string;
        /**
          * Text to show as title for the accordion.
         */
        "heading": string;
        /**
          * Heading level.
         */
        "headingLevel"?: InterfaceAccordionItemAttributes['level'];
        /**
          * Set to true to open the accordion item. Set to false to close it.
         */
        "open"?: boolean;
    }
    interface LyneAutocomplete {
        /**
          * Autocomplete id. If you use multiple instances on a page, you should set individual id's to each of them.
         */
        "autocompleteId"?: string;
        /**
          * Id which is sent as the id in the eventDetail payload when a value is selected
         */
        "eventId"?: string;
        /**
          * Define if borderless variant of autocomplete input should be used. See documentation of lyne-text-input for details.
         */
        "inputBorderless"?: boolean;
        /**
          * Debounce timeout to use for the input. See documentation of lyne-text-input for details.
         */
        "inputDebounceTimeout"?: number;
        /**
          * Label attribute for the input element. See lyne-text-input for details.
         */
        "inputLabel": string;
        /**
          * Determine if the input label should be visible. See lyne-text-input for details.
         */
        "inputLabelVisible"?: boolean;
        /**
          * Name attribute for the input element. See lyne-text-input for details.
         */
        "inputName": string;
        /**
          * Placeholder attribute for the input element. See lyne-text-input for details.
         */
        "inputPlaceholder"?: string;
        /**
          * Items to show in the autocomplete interface. You should pass a stringified array of objects, containing the `text` key for each object with an appropriate value.
         */
        "items"?: string;
        /**
          * Define how many chars a user must type into the input field for the autocomplete list to show up.
         */
        "minChars"?: number;
        /**
          * The value to use as default value for the input. The input value or the selected autocomplete value is reflected to this attribute.
         */
        "value"?: string;
    }
    interface LyneAutocompleteItem {
        /**
          * The aria-posinset attribute for the list element
         */
        "ariaPosinset"?: number;
        /**
          * The aira-setsize attribute for the list element
         */
        "ariaSetsize"?: number;
        /**
          * The text to highlight within the string property
         */
        "highlight"?: string;
        /**
          * Mark the item as selected, which will change it's appearance and the according aria attributes.
         */
        "selected"?: boolean;
        /**
          * Text to show as content of the autocomplete item
         */
        "text": string;
    }
    interface LyneButton {
        /**
          * If you use the button to trigger another widget which itself is covering the page, you must provide an according attribute for aria-haspopup.
         */
        "ariaHaspopup"?: InterfaceButtonAttributes['popup'];
        /**
          * Set to true to get a disabled button
         */
        "disabled"?: boolean;
        /**
          * Id which is sent in the click event payload
         */
        "eventId"?: string;
        /**
          * Define if icon should be shown or not
         */
        "icon"?: boolean;
        /**
          * If you use an icon without a label, you must provide an iconDescription
         */
        "iconDescription"?: string;
        /**
          * Label text to show on the button
         */
        "label"?: string;
        /**
          * The name attribute to use for the button
         */
        "name"?: string;
        /**
          * Emits whenever the native button click event triggers.
         */
        "onLyne-button_click"?: (event: CustomEvent<any>) => void;
        /**
          * Size variant, either large or small.
         */
        "size"?: InterfaceButtonAttributes['size'];
        /**
          * The type attribute to use for the button
         */
        "type"?: InterfaceButtonAttributes['type'];
        /**
          * The value attribute to use for the button
         */
        "value"?: string;
        /**
          * Variant of the button, like primary, secondary etc.
         */
        "variant"?: InterfaceButtonAttributes['variant'];
        /**
          * Set this property to true if you want only a visual represenation of a button, but no interaction (a div instead of a button will be rendered).
         */
        "visualButtonOnly"?: boolean;
    }
    interface LyneCardBadge {
        /**
          * Accessibility label text. This text gets exposed to screen reader users. The text should reflect all the information which gets passed into the component (as text or within the slot) so which is visible in the card badge, either through text or iconography.  Example text: Sales ticket price starts at CHF 37.50
         */
        "accessibilityLabel": string;
        /**
          * Badge appearance
         */
        "appearance"?: InterfaceCardBadgeAttributes['appearance'];
        /**
          * Mark as discount
         */
        "isDiscount"?: boolean;
        /**
          * Price text
         */
        "price"?: string;
        /**
          * Badge size
         */
        "size"?: InterfaceCardBadgeAttributes['size'];
        /**
          * From/above price text
         */
        "text"?: string;
    }
    interface LyneCardProduct {
        /**
          * The text which gets exposed to screen reader users. The text should reflect all the information which gets passed into the component's slots and which is visible in the card, either through text or iconography.  Example text: Connection from X to Y, via Z, on date X. Ticket price starts at X.
         */
        "accessibilityLabel": string;
        /**
          * CardProduct appearance
         */
        "appearance"?: InterfaceCardProductAttributes['appearance'];
        /**
          * If you use the button to trigger another widget which itself is covering the page, you must provide an according attribute for aria-haspopup.
         */
        "ariaHaspopup"?: InterfaceCardProductAttributes['popup'];
        /**
          * Id which is sent in the click event payload
         */
        "eventId"?: string;
        /**
          * The href value you want to link to
         */
        "hrefValue"?: string;
        /**
          * The ID value you want to reference
         */
        "idValue"?: string;
        /**
          * Defines if the card behaves like a HTML button. Needs to be set true if the card does not point to a URL.
         */
        "isButton"?: boolean;
        /**
          * Set to true to get a disabled button
         */
        "isDisabled"?: boolean;
        /**
          * CardProduct layout
         */
        "layout"?: InterfaceCardProductAttributes['layout'];
        /**
          * The name attribute to use for the button
         */
        "name"?: string;
        /**
          * The type attribute to use for the button
         */
        "type"?: InterfaceCardProductAttributes['type'];
        /**
          * The value attribute to use for the button
         */
        "value"?: string;
    }
    interface LyneFooter {
        /**
          * Footer title text, visually hidden,  necessary for screenreaders
         */
        "accessibilityTitle": string;
        /**
          * Footer appearance
         */
        "appearance"?: InterfaceFooterAttributes['appearance'];
    }
    interface LyneGrid {
        /**
          * Section appearance
         */
        "appearance"?: InterfaceGridAttributes['appearance'];
        /**
          * Grid variant
         */
        "variant"?: InterfaceGridAttributes['variant'];
    }
    interface LyneImage {
        /**
          * An alt text is not always necessary (e.g. in teaser cards when additional link text is provided). In this case we can leave the value of the alt attribute blank, but the attribute itself still needs to be present. That way we can signal assistive technology, that they can skip the image.
         */
        "alt"?: string;
        /**
          * A caption can provide additional context to the image (e.g. descriptions and the like). Links will automatically receive tabindex=-1 if hideFromScreenreader is set to true. That way they will no longer become focusable.
         */
        "caption"?: string;
        /**
          * If a copyright text is provided, we will add it to the caption and create a structured data json-ld block with the copyright information.
         */
        "copyright"?: string;
        /**
          * Copyright holder can either be an Organization or a Person
         */
        "copyrightHolder"?: InterfaceImageAttributes['copyrightHolder'];
        /**
          * Set this to true, if you want to pass a custom focal point for the image. See full documentation here: https://docs.imgix.com/apis/rendering/focalpoint-crop
         */
        "customFocalPoint"?: boolean;
        /**
          * If the lazy property is set to true, the module will automatically change the decoding to async, otherwise the decoding is set to auto which leaves the handling up to the browser. Read more about the decoding attribute here: https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding
         */
        "decoding"?: InterfaceImageAttributes['decoding'];
        /**
          * Set this to true, to receive visual guideance where the custom focal point is currently set.
         */
        "focalPointDebug"?: boolean;
        /**
          * Pass in a floating number between 0 (left) and 1 (right).
         */
        "focalPointX"?: number;
        /**
          * Pass in a floating number between 0 (top) and 1 (bottom).
         */
        "focalPointY"?: number;
        /**
          * In cases when the image is just serving a decorative purpose, we can hide it from assistive technologies (e.g. an image in a teaser card)
         */
        "hideFromScreenreader"?: boolean;
        /**
          * Right now the module is heavily coupled with the image delivery service imgix and depends on the original files being stored inside of AEM. You can pass in any https://cdn.img.sbb.ch img src address you find on sbb.ch to play around with it. Just strip the url parameters and paste in the plain file address. If you want to know how to best work with this module with images coming from a different source, please contact the LYNE Core Team.
         */
        "imageSrc"?: string;
        /**
          * Just some example image file you can use to play around with the component.
         */
        "imageSrcExamples"?: string;
        /**
          * The importance attribute is fairly new attribute which should help the browser decide which resources it should prioritise during page load. We will set the attribute value based on the value, we receive in the loading attribute. 'eager', which we use for the largest image within the initial viewport, will set the attribute value to 'high'. 'lazy', which we use for images below the fold, will set the attribute value to 'low'.
         */
        "importance"?: InterfaceImageAttributes['importance'];
        /**
          * With the support of native image lazy loading, we can now decide whether we want to load the image immediately or only once it is close to the visible viewport. The value eager is best used for images within the initial viewport. We want to load these images as fast as possible to improve the Core Web Vitals values. lazy on the other hand works best for images which are further down the page or invisible during the loading of the initial viewport.
         */
        "loading"?: InterfaceImageAttributes['loading'];
        /**
          * If set to true, we show a blurred version of the image as placeholder before the actual image shows up. This will help to improve the perceived loading performance. Read more about the idea of lqip here: https://medium.com/@imgix/lqip-your-images-for-fast-loading-2523d9ee4a62
         */
        "lqip"?: boolean;
        /**
          * With performance.mark you can log a timestamp associated with the name you define in performanceMark when a certain event is happening. In our case we will log the performance.mark into the PerformanceEntry API once the image is fully loaded. Performance monitoring tools like SpeedCurve or Lighthouse are then able to grab these entries from the PerformanceEntry API and give us additional information and insights about our page loading behaviour. We are then also able to monitor these values over a long period to see if our performance increases or decreases over time. Best to use lowercase strings here, separate words with underscores or dashes.
         */
        "performanceMark"?: string;
        /**
          * With the pictureSizesConfig object, you can pass in information into image about what kind of source elements should get rendered. mediaQueries accepts multiple Media Query entries which can get combined by defining a conditionOperator. An example could look like this: {    "breakpoints": [      {        "image": {          "height": "675",          "width": "1200"        },        "mediaQueries": [          {            "conditionFeature": "min-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "breakpoint-large-min"            },            "conditionOperator": false          }        ]      },      {        "image": {          "height": "549",          "width": "976"        },        "mediaQueries": [          {            "conditionFeature": "min-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "breakpoint-small-min"            },            "conditionOperator": false          }        ]      },      {        "image": {          "height": "180",          "width": "320"        },        "mediaQueries": [          {            "conditionFeature": "max-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "breakpoint-micro-max"            },            "conditionOperator": "and"          },          {            "conditionFeature": "orientation",            "conditionFeatureValue": {              "lyneDesignToken": false,              "value": "landscape"            },            "conditionOperator": false          }        ]      }    ]  }
         */
        "pictureSizesConfig"?: string;
        /**
          * Based on the variant, we apply specific aspect ratios to the image accross all viewports.
         */
        "variant"?: InterfaceImageAttributes['variant'];
    }
    interface LyneInputError {
        /**
          * The error message, we want to show.
         */
        "message": string;
    }
    interface LyneJourneyHeader {
        /**
          * Journey header appearance
         */
        "appearance"?: InterfaceJourneyHeaderAttributes['appearance'];
        /**
          * Destination location for the journey header
         */
        "destination": string;
        /**
          * Is the journey a round trip. If so it gets indicated through a roundtrip icon
         */
        "isRoundTrip"?: boolean;
        /**
          * A11y Tip: Sometimes we need to set an id, especially if we want to associate a relationship with another element through the use of aria-labelledby or aria-describedby or just offer an anchor target
         */
        "journeyHeaderId"?: '';
        /**
          * Journey header markup: Depends on the context where the journey will be used but it is important to pick the correct markup element to match to correct semantics
         */
        "markup"?: InterfaceJourneyHeaderAttributes['markup'];
        /**
          * Origin location for the journey header
         */
        "origin": string;
        /**
          * Journey header size
         */
        "size"?: InterfaceJourneyHeaderAttributes['size'];
    }
    interface LyneLink {
        /**
          * If set to true, the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The href value you want to link to
         */
        "hrefValue": string;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://lyne.sbb.ch/tokens/icons/.
         */
        "icon"?: string;
        /**
          * Decide whether the icon should get flipped horizontally if the document writing mode is changed from ltr to rtl or vice versa.
         */
        "iconFlip"?: boolean;
        /**
          * The icon can either be place before or after the text.
         */
        "iconPlacement"?: InterfaceLinkAttributes['iconPlacement'];
        /**
          * Pass in an id, if you need to identify the link element.
         */
        "idValue"?: string;
        /**
          * The link text we want to visually show.
         */
        "text": string;
        /**
          * Text size, the link should get in the non button variation.
         */
        "textSize"?: InterfaceLinkAttributes['textSize'];
        /**
          * Choose the link style variant.
         */
        "variant"?: InterfaceLinkAttributes['variant'];
    }
    interface LyneLinkButton {
        /**
          * If set to true, the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The href value you want to link to
         */
        "hrefValue": string;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://lyne.sbb.ch/tokens/icons/
         */
        "icon"?: string;
        /**
          * Decide whether the icon should get flipped horizontally if the document writing mode is changed from ltr to rtl or vice versa.
         */
        "iconFlip"?: boolean;
        /**
          * The icon can either be place before or after the text
         */
        "iconPlacement"?: InterfaceLinkButtonAttributes['iconPlacement'];
        /**
          * Pass in an id, if you need to identify the link element.
         */
        "idValue"?: string;
        /**
          * The link text we want to visually show
         */
        "text": string;
        /**
          * Choose the link button style variant
         */
        "variant"?: InterfaceLinkButtonAttributes['variant'];
    }
    interface LyneLinkList {
        /**
          * The direction in which the list will be shown. "-from-large" indicates that the list will be horizontal from above large breakpoint. Below it has the default behaviour which is a vertical list.
         */
        "listDirection"?: InterfaceLyneLinkListAttributes['direction'];
        /**
          * The semantic level of the title, e.g. 3 = h3
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
        /**
          * The title text we want to show before the list
         */
        "titleText"?: string;
        /**
          * Choose the link list style. This does not refer to light or dark mode, but the background color on which the list is placed. Light and dark mode styling will be applied differently.
         */
        "variant"?: InterfaceLyneLinkListAttributes['variant'];
    }
    interface LyneOverlay {
        "onDidDismiss"?: (event: CustomEvent<InterfaceOverlayEventDetail>) => void;
        "onDidPresent"?: (event: CustomEvent<void>) => void;
        "onWillDismiss"?: (event: CustomEvent<InterfaceOverlayEventDetail>) => void;
        "onWillPresent"?: (event: CustomEvent<void>) => void;
        "overlayIndex"?: number;
    }
    interface LynePanel {
        /**
          * The text to use as button text
         */
        "buttonText": string;
        /**
          * Id which is sent in the click event payload for the button
         */
        "eventId"?: string;
        /**
          * The tag to use for the text element
         */
        "tag"?: InterfacePanelAttributes['tag'];
        /**
          * The text to show in the panel
         */
        "text": string;
    }
    interface LynePearlChain {
        /**
          * Per default, the current location has a pulsating animation. You can disable the animation with this property.
         */
        "disableAnimation"?: boolean;
        /**
          * Stringified JSON to define the legs of the pearl-chain. Format: `{"legs": [{"cancellation": true, "duration": 25}, ...]}` `duration`: number between 0 and 100. Duration of the leg is relative to the total travel time. Example: departure 16:30, change at 16:40, arrival at 17:00. So the change should have a duration of 33.33%. `cancellation`: if set, the leg will be marked as canceled.
         */
        "legs": string;
        /**
          * Define, if the pearl-chain represents a connection in the past, in the future or if it is a currently running connection. If it is currently running, provide a number between 0 and 100, which will represent the current location on the pearl-chain.
         */
        "status"?: InterfacePearlChainAttributes['status'];
    }
    interface LyneSbbClock {
        /**
          * initialTime accepts a string following a ${number}:${number}:${number} pattern. If left empty or the string 'now' is used we will set the current time the client has on its device.
         */
        "initialTime"?: Time;
        /**
          * If set to true, the clock will be paused.
         */
        "paused"?: boolean;
    }
    interface LyneSbbLogo {
        /**
          * The Logo needs to have a certain protective room around it
         */
        "protectiveRoom"?: InterfaceLogoAttributes['protectiveRoom'];
        /**
          * According to the Corporate Design Guidelines the logo can be used in these variants
         */
        "variant"?: InterfaceLogoAttributes['variant'];
    }
    interface LyneSbbSignet {
        /**
          * The Signet needs to have a certain protective room around it
         */
        "protectiveRoom"?: InterfaceSignetAttributes['protectiveRoom'];
        /**
          * According to the Corporate Design Guidelines the signet can be used in these variants
         */
        "variant"?: InterfaceSignetAttributes['variant'];
    }
    interface LyneSection {
        /**
          * Section appearance
         */
        "appearance"?: InterfaceSectionAttributes['appearance'];
        /**
          * Section width
         */
        "width"?: InterfaceSectionAttributes['width'];
    }
    interface LyneSlotComponent {
    }
    interface LyneStack {
        /**
          * Stack appearance
         */
        "appearance"?: InterfaceStackAttributes['appearance'];
        /**
          * Collapse horizontal stack into vertical layout below a certain breakpoint. This has only an effect for horizontal appearances.
         */
        "collapseHorizontalBelow"?: InterfaceStackAttributes['collapseHorizontalBelow'];
        /**
          * Stack gap horizontal, defines the space between each stack items in the vertical direction. The spacing can be fixed or responsive (which then depends on the breakpoint). The `x` in the fixed spacing scale is a representation of the base spacing unit. E.g. `3 * base spacing unit`
         */
        "gapHorizontal"?: InterfaceStackAttributes['spacing'];
        /**
          * Stack gap vertical, defines the space between each stack items in the horizontal direction. The spacing can be fixed or responsive (which then depends on the breakpoint). The `x` in the fixed spacing scale is a representation of the base spacing unit. E.g. `3 * base spacing unit`
         */
        "gapVertical"?: InterfaceStackAttributes['spacing'];
        /**
          * Render stack as placeholder
         */
        "isPlaceholder"?: boolean;
        /**
          * Render horizontal stack as non-wrapping stack
         */
        "noWrap"?: boolean;
        /**
          * Space before the stack
         */
        "spaceLeading"?: InterfaceStackAttributes['spacing'];
        /**
          * Space before the stack
         */
        "spaceTrailing"?: InterfaceStackAttributes['spacing'];
        /**
          * Stack height, reflects CSS property `height` and accepts all appropriate/valid CSS height values
         */
        "stackHeight"?: string;
        /**
          * Stack width, reflects CSS property `width` and accepts all appropriate/valid CSS width values
         */
        "stackWidth"?: string;
        /**
          * Stack tag / HTML representation of the stack. If the stack represents a list of items change the HTML representation to `ul` or `ol` tag. In this case the only allowed stack items are `li` elements.
         */
        "tag"?: InterfaceStackAttributes['tag'];
    }
    interface LyneTeaserHero {
        /**
          * Button text property for lyne-panel. See lyne-panel for additional info
         */
        "buttonText": string;
        /**
          * Image loading property. See lyne-image for additional info
         */
        "imageLoading"?: InterfaceImageAttributes['loading'];
        /**
          * Image source property for lyne-image. See lyne-image for additional info
         */
        "imageSrc": string;
        /**
          * Link to open if the teaser is clicked/pressed.
         */
        "link": string;
        /**
          * If `openInNewWindow` is set, you should provide according information which will be read aloud for screenreader users (e.g. "Link target will open in a new window").
         */
        "newWindowInfoText"?: string;
        /**
          * If set, the link will be opened in a new window.
         */
        "openInNewWindow"?: boolean;
        /**
          * Text property for lyne-panel. See lyne-panel for additional info
         */
        "text": string;
    }
    interface LyneTextInput {
        /**
          * If set to true, the input element will have no border, but a drop shadow.
         */
        "borderless"?: boolean;
        /**
          * Debounce type for the input change event in ms. If you set this value to e.g. 300, we fire the input event only every 300ms.
         */
        "debounceInputEvent"?: number;
        /**
          * Id which is sent as the id in the eventDetail payload
         */
        "eventId"?: string;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://lyne.sbb.ch/tokens/icons/.
         */
        "icon"?: string;
        /**
          * The aria-autocomplete attribute for the input element.
         */
        "inputAriaAutoComplete"?: InterfaceLyneTextInputAttributes['inputAriaAutoComplete'];
        /**
          * The id to use as the aira-controls attribute for the input element.
         */
        "inputAriaControls"?: string;
        /**
          * Set aria-expanded on the input element.
         */
        "inputAriaExpanded"?: boolean;
        /**
          * Choose either on, off or one of the existing autocomplete values. Read more about them here: https://mzl.la/3wpfaDV
         */
        "inputAutoCompleteValue"?: InterfaceLyneTextInputAttributes['inputAutoCompleteValue'];
        /**
          * If set to true, the input field will be disabled.
         */
        "inputDisabled"?: boolean;
        /**
          * If set to true, we will set an an error message for the current input field.
         */
        "inputError"?: boolean;
        /**
          * Each input needs to have an individual id. If no id is provided, the component will create a unique id by itself.
         */
        "inputId"?: string;
        /**
          * Pass on a expected max length.
         */
        "inputMaxLength"?: number;
        /**
          * Pass on a expected min length.
         */
        "inputMinLength"?: number;
        /**
          * Each input should have an individual name.
         */
        "inputName": string;
        /**
          * Add a validation pattern (regex) the input should follow. Read more here: https://mzl.la/3C3HTiG
         */
        "inputPattern"?: string;
        /**
          * Add a placeholder to show what kind of input is expected.
         */
        "inputPlaceholder"?: string;
        /**
          * If set to true, an input in this field will be required.
         */
        "inputRequired"?: boolean;
        /**
          * The role attribute used for the input element.
         */
        "inputRole"?: InterfaceLyneTextInputAttributes['inputRole'];
        /**
          * Define which input type you would like to use. Read more about the individual advantages here, most of the are related to show the user the most convienient keyboard: https://bit.ly/3wuQE47
         */
        "inputType": string;
        /**
          * Value for the input element.
         */
        "inputValue"?: string;
        /**
          * Each input element needs to have a label associated with it.
         */
        "label": string;
        /**
          * If set to false, the label will be visually hidden but still be in the markup to provide proper semantics
         */
        "labelVisible"?: boolean;
    }
    interface LyneTimetable {
    }
    interface LyneTimetableBarrierFree {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableButton {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableButtonAttributes['appearance'];
        /**
          * If you use the button to trigger another widget which itself is covering the page, you must provide an according attribute for aria-haspopup.
         */
        "ariaHaspopup"?: InterfaceLyneTimetableButtonAttributes['popup'];
        /**
          * If appearance is set to 'cus-him' or 'walk', we need to provide a config to popultate the nested web component.
         */
        "config"?: string;
        /**
          * Set to true to get a disabled button
         */
        "disabled"?: boolean;
        /**
          * Id which is sent in the click event payload
         */
        "eventId"?: string;
        /**
          * Set to true to initially show the state, which would get set by pressing the button.
         */
        "expanded"?: boolean;
        /**
          * The name attribute to use for the button
         */
        "name"?: string;
    }
    interface LyneTimetableCusHim {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableCusHimAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableDuration {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableOccupancy {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableParkAndRail {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableParkAndRailAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetablePlatform {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetablePlatformAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableRow {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableRowButton {
        /**
          * Id which is sent in the event of clicking the button
         */
        "eventId"?: string;
        /**
          * Set to true to initially show the state, which would get set by pressing the button.
         */
        "expanded"?: boolean;
    }
    interface LyneTimetableRowColumnHeaders {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableRowDayChange {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableRowHeader {
        "config": string;
    }
    interface LyneTimetableTransportationDetails {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableTransportationNumber {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableTransportationNumberAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableTransportationTime {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableTransportationTimeAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableTransportationWalk {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableTransportationWalkAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTimetableTravelHints {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceLyneTimetableTravelHintsAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface LyneTitle {
        /**
          * Title level
         */
        "level"?: InterfaceTitleAttributes['level'];
        /**
          * Text for the title
         */
        "text": string;
        /**
          * A11y Tip: Sometimes we need to set an id, especially if we want to associate a relationship with another element through the use of aria-labelledby or aria-describedby or just offer an anchor target
         */
        "titleId"?: '';
        /**
          * Choose the title style variant
         */
        "variant"?: InterfaceTitleAttributes['variant'];
        /**
          * Visual level for the title. If you don't define the visual-level, the value for level will be used.
         */
        "visualLevel"?: InterfaceTitleAttributes['visualLevel'];
        /**
          * Sometimes we need a title in the markup to present a proper hierarchy to the screenreaders while we do not want to let that title appear visually. In this case we set visuallyHidden to true
         */
        "visuallyHidden"?: false;
    }
    interface IntrinsicElements {
        "lyne-accordion": LyneAccordion;
        "lyne-accordion-item": LyneAccordionItem;
        "lyne-autocomplete": LyneAutocomplete;
        "lyne-autocomplete-item": LyneAutocompleteItem;
        "lyne-button": LyneButton;
        "lyne-card-badge": LyneCardBadge;
        "lyne-card-product": LyneCardProduct;
        "lyne-footer": LyneFooter;
        "lyne-grid": LyneGrid;
        "lyne-image": LyneImage;
        "lyne-input-error": LyneInputError;
        "lyne-journey-header": LyneJourneyHeader;
        "lyne-link": LyneLink;
        "lyne-link-button": LyneLinkButton;
        "lyne-link-list": LyneLinkList;
        "lyne-overlay": LyneOverlay;
        "lyne-panel": LynePanel;
        "lyne-pearl-chain": LynePearlChain;
        "lyne-sbb-clock": LyneSbbClock;
        "lyne-sbb-logo": LyneSbbLogo;
        "lyne-sbb-signet": LyneSbbSignet;
        "lyne-section": LyneSection;
        "lyne-slot-component": LyneSlotComponent;
        "lyne-stack": LyneStack;
        "lyne-teaser-hero": LyneTeaserHero;
        "lyne-text-input": LyneTextInput;
        "lyne-timetable": LyneTimetable;
        "lyne-timetable-barrier-free": LyneTimetableBarrierFree;
        "lyne-timetable-button": LyneTimetableButton;
        "lyne-timetable-cus-him": LyneTimetableCusHim;
        "lyne-timetable-duration": LyneTimetableDuration;
        "lyne-timetable-occupancy": LyneTimetableOccupancy;
        "lyne-timetable-park-and-rail": LyneTimetableParkAndRail;
        "lyne-timetable-platform": LyneTimetablePlatform;
        "lyne-timetable-row": LyneTimetableRow;
        "lyne-timetable-row-button": LyneTimetableRowButton;
        "lyne-timetable-row-column-headers": LyneTimetableRowColumnHeaders;
        "lyne-timetable-row-day-change": LyneTimetableRowDayChange;
        "lyne-timetable-row-header": LyneTimetableRowHeader;
        "lyne-timetable-transportation-details": LyneTimetableTransportationDetails;
        "lyne-timetable-transportation-number": LyneTimetableTransportationNumber;
        "lyne-timetable-transportation-time": LyneTimetableTransportationTime;
        "lyne-timetable-transportation-walk": LyneTimetableTransportationWalk;
        "lyne-timetable-travel-hints": LyneTimetableTravelHints;
        "lyne-title": LyneTitle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "lyne-accordion": LocalJSX.LyneAccordion & JSXBase.HTMLAttributes<HTMLLyneAccordionElement>;
            "lyne-accordion-item": LocalJSX.LyneAccordionItem & JSXBase.HTMLAttributes<HTMLLyneAccordionItemElement>;
            "lyne-autocomplete": LocalJSX.LyneAutocomplete & JSXBase.HTMLAttributes<HTMLLyneAutocompleteElement>;
            "lyne-autocomplete-item": LocalJSX.LyneAutocompleteItem & JSXBase.HTMLAttributes<HTMLLyneAutocompleteItemElement>;
            "lyne-button": LocalJSX.LyneButton & JSXBase.HTMLAttributes<HTMLLyneButtonElement>;
            "lyne-card-badge": LocalJSX.LyneCardBadge & JSXBase.HTMLAttributes<HTMLLyneCardBadgeElement>;
            "lyne-card-product": LocalJSX.LyneCardProduct & JSXBase.HTMLAttributes<HTMLLyneCardProductElement>;
            "lyne-footer": LocalJSX.LyneFooter & JSXBase.HTMLAttributes<HTMLLyneFooterElement>;
            "lyne-grid": LocalJSX.LyneGrid & JSXBase.HTMLAttributes<HTMLLyneGridElement>;
            "lyne-image": LocalJSX.LyneImage & JSXBase.HTMLAttributes<HTMLLyneImageElement>;
            "lyne-input-error": LocalJSX.LyneInputError & JSXBase.HTMLAttributes<HTMLLyneInputErrorElement>;
            "lyne-journey-header": LocalJSX.LyneJourneyHeader & JSXBase.HTMLAttributes<HTMLLyneJourneyHeaderElement>;
            "lyne-link": LocalJSX.LyneLink & JSXBase.HTMLAttributes<HTMLLyneLinkElement>;
            "lyne-link-button": LocalJSX.LyneLinkButton & JSXBase.HTMLAttributes<HTMLLyneLinkButtonElement>;
            "lyne-link-list": LocalJSX.LyneLinkList & JSXBase.HTMLAttributes<HTMLLyneLinkListElement>;
            "lyne-overlay": LocalJSX.LyneOverlay & JSXBase.HTMLAttributes<HTMLLyneOverlayElement>;
            "lyne-panel": LocalJSX.LynePanel & JSXBase.HTMLAttributes<HTMLLynePanelElement>;
            "lyne-pearl-chain": LocalJSX.LynePearlChain & JSXBase.HTMLAttributes<HTMLLynePearlChainElement>;
            "lyne-sbb-clock": LocalJSX.LyneSbbClock & JSXBase.HTMLAttributes<HTMLLyneSbbClockElement>;
            "lyne-sbb-logo": LocalJSX.LyneSbbLogo & JSXBase.HTMLAttributes<HTMLLyneSbbLogoElement>;
            "lyne-sbb-signet": LocalJSX.LyneSbbSignet & JSXBase.HTMLAttributes<HTMLLyneSbbSignetElement>;
            "lyne-section": LocalJSX.LyneSection & JSXBase.HTMLAttributes<HTMLLyneSectionElement>;
            "lyne-slot-component": LocalJSX.LyneSlotComponent & JSXBase.HTMLAttributes<HTMLLyneSlotComponentElement>;
            "lyne-stack": LocalJSX.LyneStack & JSXBase.HTMLAttributes<HTMLLyneStackElement>;
            "lyne-teaser-hero": LocalJSX.LyneTeaserHero & JSXBase.HTMLAttributes<HTMLLyneTeaserHeroElement>;
            "lyne-text-input": LocalJSX.LyneTextInput & JSXBase.HTMLAttributes<HTMLLyneTextInputElement>;
            "lyne-timetable": LocalJSX.LyneTimetable & JSXBase.HTMLAttributes<HTMLLyneTimetableElement>;
            "lyne-timetable-barrier-free": LocalJSX.LyneTimetableBarrierFree & JSXBase.HTMLAttributes<HTMLLyneTimetableBarrierFreeElement>;
            "lyne-timetable-button": LocalJSX.LyneTimetableButton & JSXBase.HTMLAttributes<HTMLLyneTimetableButtonElement>;
            "lyne-timetable-cus-him": LocalJSX.LyneTimetableCusHim & JSXBase.HTMLAttributes<HTMLLyneTimetableCusHimElement>;
            "lyne-timetable-duration": LocalJSX.LyneTimetableDuration & JSXBase.HTMLAttributes<HTMLLyneTimetableDurationElement>;
            "lyne-timetable-occupancy": LocalJSX.LyneTimetableOccupancy & JSXBase.HTMLAttributes<HTMLLyneTimetableOccupancyElement>;
            "lyne-timetable-park-and-rail": LocalJSX.LyneTimetableParkAndRail & JSXBase.HTMLAttributes<HTMLLyneTimetableParkAndRailElement>;
            "lyne-timetable-platform": LocalJSX.LyneTimetablePlatform & JSXBase.HTMLAttributes<HTMLLyneTimetablePlatformElement>;
            "lyne-timetable-row": LocalJSX.LyneTimetableRow & JSXBase.HTMLAttributes<HTMLLyneTimetableRowElement>;
            "lyne-timetable-row-button": LocalJSX.LyneTimetableRowButton & JSXBase.HTMLAttributes<HTMLLyneTimetableRowButtonElement>;
            "lyne-timetable-row-column-headers": LocalJSX.LyneTimetableRowColumnHeaders & JSXBase.HTMLAttributes<HTMLLyneTimetableRowColumnHeadersElement>;
            "lyne-timetable-row-day-change": LocalJSX.LyneTimetableRowDayChange & JSXBase.HTMLAttributes<HTMLLyneTimetableRowDayChangeElement>;
            "lyne-timetable-row-header": LocalJSX.LyneTimetableRowHeader & JSXBase.HTMLAttributes<HTMLLyneTimetableRowHeaderElement>;
            "lyne-timetable-transportation-details": LocalJSX.LyneTimetableTransportationDetails & JSXBase.HTMLAttributes<HTMLLyneTimetableTransportationDetailsElement>;
            "lyne-timetable-transportation-number": LocalJSX.LyneTimetableTransportationNumber & JSXBase.HTMLAttributes<HTMLLyneTimetableTransportationNumberElement>;
            "lyne-timetable-transportation-time": LocalJSX.LyneTimetableTransportationTime & JSXBase.HTMLAttributes<HTMLLyneTimetableTransportationTimeElement>;
            "lyne-timetable-transportation-walk": LocalJSX.LyneTimetableTransportationWalk & JSXBase.HTMLAttributes<HTMLLyneTimetableTransportationWalkElement>;
            "lyne-timetable-travel-hints": LocalJSX.LyneTimetableTravelHints & JSXBase.HTMLAttributes<HTMLLyneTimetableTravelHintsElement>;
            "lyne-title": LocalJSX.LyneTitle & JSXBase.HTMLAttributes<HTMLLyneTitleElement>;
        }
    }
}
