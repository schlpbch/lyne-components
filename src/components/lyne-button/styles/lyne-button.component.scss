// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin, available for shared
// and default mode
@include host-component-properties;

:host {
  display: inline-block;

  @include buttonVariables();
}

.button--primary-negative {
  @include buttonPrimaryNegativeVariables();
}

.button--secondary {
  @include buttonSecondaryVariables();
}

.button--secondary-negative {
  @include buttonSecondaryNegativeVariables();
}

.button--translucent {
  --color-active-background: var(--color-black-alpha-70);
  --color-active-border: var(--color-black-alpha-0);
  --color-active-text: var(--color-cloud-default);
  --color-default-background: var(--color-black-alpha-50);
  --color-default-border: var(--color-black-alpha-0);
  --color-default-text: var(--color-white-default);
  --color-disabled-background: var(--color-black-alpha-20);
  --color-disabled-border: var(--color-black-alpha-0);
  --color-disabled-text: var(--color-milk-default);
  --color-hover-background: var(--color-black-alpha-60);
  --color-hover-border: var(--color-black-alpha-0);
  --color-hover-text: var(--color-milk-default);
}

.button--translucent-negative {
  --color-active-background: var(--color-white-alpha-70);
  --color-active-border: var(--color-white-alpha-0);
  --color-active-text: var(--color-anthracite-default);
  --color-default-background: var(--color-white-alpha-50);
  --color-default-border: var(--color-white-alpha-0);
  --color-default-text: var(--color-charcoal-default);
  --color-disabled-background: var(--color-white-alpha-20);
  --color-disabled-border: var(--color-white-alpha-0);
  --color-disabled-text: var(--color-platinum-default);
  --color-hover-background: var(--color-white-alpha-60);
  --color-hover-border: var(--color-white-alpha-0);
  --color-hover-text: var(--color-iron-default);
}

.button--transparent {
  --color-active-background: var(--color-cloud-default);
  --color-active-border: var(--color-cloud-default);
  --color-active-text: var(--color-black-default);
  --color-default-background: transparent;
  --color-default-border: transparent;
  --color-default-text: var(--color-black-default);
  --color-disabled-background: transparent;
  --color-disabled-border: transparent;
  --color-disabled-text: var(--color-granite-default);
  --color-hover-background: var(--color-milk-default);
  --color-hover-border: var(--color-milk-default);
  --color-hover-text: var(--color-black-default);
}

.button--transparent-negative {
  --color-active-background: var(--color-iron-default);
  --color-active-border: var(--color-iron-default);
  --color-active-text: var(--color-white-default);
  --color-default-background: transparent;
  --color-default-border: transparent;
  --color-default-text: var(--color-white-default);
  --color-disabled-background: transparent;
  --color-disabled-border: transparent;
  --color-disabled-text: var(--color-granite-default);
  --color-hover-background: var(--color-charcoal-default);
  --color-hover-border: var(--color-charcoal-default);
  --color-hover-text: var(--color-white-default);
}

.button--size-m {
  @include buttonSizeMVariables;
}

.button--icon-only {
  --padding-inline: 0;
  --icon-margin-inline-end: 0;

  width: pxToRem(var(--min-height-hover, var(--min-height)));
  justify-content: center;

  &.button:disabled::after {
    inset-inline: pxToRem(
      calc(var(--line-through-icon-button-padding-inline) - var(--border-width))
    );
  }
}

.button {
  @include button();
}

.button--primary:not(:disabled),
.button--secondary:not(:disabled),
.button--primary-negative:not(:disabled) {
  @include buttonShadowNotDisabled();
}

.button--visual-only {
  width: fit-content;
  user-select: none;
}

.button__label, .button__icon {
  transition: transform var(--transition-duration) var(--transition-easing-function);
  transform: translateY(#{pxToRem(var(--translate-y-content-hover, 0))});
}

.button__label {
  display: block;
}

.button__icon {
  @include buttonIcon();
}

.button__icon-description {
  @include screenReaderOnly;
}

:host ::slotted(svg) {
  fill: currentColor;

  @include ifForcedColors {
    fill: ButtonText;
  }
}

.button:disabled {
  color: var(--color-disabled-text);
  background-color: var(--color-disabled-background);
  border-color: var(--color-disabled-border);
  cursor: default;

  // Line through content
  &::after {
    position: absolute;
    content: "";
    background-color: var(--color-disabled-text);
    height: pxToRem(var(--line-through-height-disabled));
    inset-inline: pxToRem(var(--padding-inline));
  }

  ::slotted(svg) {
    @include ifForcedColors {
      fill: GrayText;
    }
  }
}

.button:hover:not(:disabled),
.button:focus:not(:disabled) {
  @include buttonFocusAndHover();
}

.button:active:not(:disabled) {
  @include buttonActive();
}

.button--secondary-negative,
.button--translucent,
.button--translucent-negative,
.button--transparent,
.button--transparent-negative {
  box-shadow: none;

  &:hover,
  &:focus {
    &:not(:disabled) {
      box-shadow: none;
    }
  }
}
