// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin, available for shared
// and default mode
@include host-component-properties;

:host {
  // Todo during grid enhancements, refactor below gutter tokens / add them to
  // the design tokens

  // Reminder: --_section-gap-horizontal needs a new responsive gap design token
  // var(--spacing-responsive-s); is just a placeholder for now
  --_section-gap-horizontal: var(--section-gap-horizontal, var(--spacing-responsive-s));
  --_section-gap-vertical: var(--section-gap-vertical, var(--spacing-responsive-l));
  --_section-background-color: var(--section-background-color, none);

  // Contextual design for lyne-stack
  --stack-text-color-normal: var(--color-metal-default);
}

.section {
  // margin-block-start: pxToRem(var(--spacing-responsive-l));
  // padding-block-start: pxToRem(var(--spacing-responsive-l));
  // padding-block-end: pxToRem(var(--spacing-responsive-l));
  .columns,
  .full-width {
    background-color: var(--_section-background-color);
  }
}

.section--primary-negative {
  --_section-background-color: var(--color-charcoal-default);
  --title-text-color-normal: var(--color-storm-default);
}

.section--page-spacing {
  @include page-spacing;

  .columns,
  .full-width {
    @include page-spacing__inner;
  }
}

.section--full-bleed--until-ultra {
  @include mq($from: ultra) {
    @include page-spacing;

    .columns,
    .full-width {
      @include page-spacing__inner;
    }
  }
}

.section--full-bleed--until-ultra-plus {
  @include mq($from: ultra) {
    @include page-spacing;

    .columns,
    .full-width {
      @include page-spacing--ultra-plus__inner();
    }
  }
}

// The following section/column/grid handling will be addressed in the grid pr
// and can be overlooked for now here
.columns {
  // Reset
  width: 100%;
  padding: 0;
  margin: 0;

  display: flex;
  flex-wrap: wrap;
  column-gap: pxToRem(var(--_section-gap-horizontal));
  row-gap: pxToRem(var(--_section-gap-vertical));

  ::slotted( [slot] ) {
    flex-basis: 100%;

    @include mq($from: small) {
      flex: 0 0 calc(50% - (#{pxToRem(var(--_section-gap-horizontal))}/2));
      max-width: calc(50% - (#{pxToRem(var(--_section-gap-horizontal))}/2));
    }
    @include mq($from: wide) {
      flex: 0 0 calc(25% - ((3*#{pxToRem(var(--_section-gap-horizontal))})/4));
      max-width: calc(25% - ((3*#{pxToRem(var(--_section-gap-horizontal))})/4));
    }
  }
}

.full-width {
  // Reset
  width: 100%;
  padding: 0;
  margin: 0;

  display: flex;
  flex-wrap: wrap;
  column-gap: pxToRem(var(--_section-gap-horizontal));
  row-gap: pxToRem(var(--_section-gap-vertical));

  ::slotted( [slot] ) {
    flex-basis: 100%;
  }
}
